# Script de test de la configuration PostgreSQL
param(
    [string]$ConnectionString = "Host=localhost;Database=fleetsynmanager;Username=postgres;Password=postgres;Port=5432"
)

Write-Host "Test de la configuration PostgreSQL pour FleetSyncManager" -ForegroundColor Green
Write-Host "=========================================================" -ForegroundColor Green
Write-Host ""

# Fonction pour tester la connexion PostgreSQL
function Test-PostgreSQLConnection {
    param([string]$connStr)
    
    try {
        Write-Host "Test de connexion PostgreSQL..." -ForegroundColor Yellow
        
        # Utiliser psql si disponible
        if (Get-Command psql -ErrorAction SilentlyContinue) {
            $env:PGPASSWORD = "postgres"
            psql -h localhost -U postgres -d postgres -c "SELECT version();" 2>$null
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "Connexion PostgreSQL reussie" -ForegroundColor Green
                return $true
            }
        }
        
        Write-Host "psql non disponible, utilisation du test .NET" -ForegroundColor Yellow
        return $null
    }
    catch {
        Write-Host "Erreur de connexion PostgreSQL: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour v√©rifier la configuration de l'application
function Test-ApplicationConfiguration {
    Write-Host "üìã V√©rification de la configuration de l'application..." -ForegroundColor Yellow
    
    $appSettingsPath = "appsettings.json"
    $appSettingsDevPath = "appsettings.Development.json"
    
    if (Test-Path $appSettingsPath) {
        $config = Get-Content $appSettingsPath | ConvertFrom-Json
        $useInMemory = $config.DatabaseSettings.UseInMemoryDatabase
        
        if ($useInMemory -eq $false) {
            Write-Host "‚úÖ appsettings.json configur√© pour PostgreSQL (UseInMemoryDatabase: false)" -ForegroundColor Green
        } else {
            Write-Host "‚ùå appsettings.json configur√© pour InMemory (UseInMemoryDatabase: true)" -ForegroundColor Red
            return $false
        }
    }
    
    if (Test-Path $appSettingsDevPath) {
        $configDev = Get-Content $appSettingsDevPath | ConvertFrom-Json
        $useInMemoryDev = $configDev.DatabaseSettings.UseInMemoryDatabase
        
        if ($useInMemoryDev -eq $false) {
            Write-Host "‚úÖ appsettings.Development.json configur√© pour PostgreSQL (UseInMemoryDatabase: false)" -ForegroundColor Green
        } else {
            Write-Host "‚ùå appsettings.Development.json configur√© pour InMemory (UseInMemoryDatabase: true)" -ForegroundColor Red
            return $false
        }
    }
    
    return $true
}

# Fonction pour cr√©er la base de donn√©es
function Initialize-Database {
    Write-Host "üóÑÔ∏è  Initialisation de la base de donn√©es..." -ForegroundColor Yellow
    
    # Cr√©er la base de donn√©es si elle n'existe pas
    if (Get-Command psql -ErrorAction SilentlyContinue) {
        $env:PGPASSWORD = "postgres"
        
        Write-Host "   üìù Cr√©ation de la base de donn√©es 'fleetsynmanager'..." -ForegroundColor Cyan
        psql -h localhost -U postgres -d postgres -c "CREATE DATABASE fleetsynmanager;" 2>$null
        
        if ($LASTEXITCODE -eq 0 -or $LASTEXITCODE -eq 2) {
            Write-Host "   ‚úÖ Base de donn√©es cr√©√©e ou existe d√©j√†" -ForegroundColor Green
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  psql non disponible - la base sera cr√©√©e au premier d√©marrage" -ForegroundColor Yellow
    }
    
    # Ex√©cuter les migrations Entity Framework
    Write-Host "   üîÑ Ex√©cution des migrations Entity Framework..." -ForegroundColor Cyan
    
    try {
        # V√©rifier si nous avons des migrations
        if (Test-Path "src/Laroche.FleetManager.Infrastructure/Migrations") {
            $migrations = Get-ChildItem "src/Laroche.FleetManager.Infrastructure/Migrations" -Filter "*.cs" | Where-Object { $_.Name -ne "ApplicationDbContextModelSnapshot.cs" }
            
            if ($migrations.Count -gt 0) {
                Write-Host "   üìã Migrations trouv√©es: $($migrations.Count)" -ForegroundColor Cyan
                dotnet ef database update --project src/Laroche.FleetManager.Infrastructure --startup-project src/Laroche.FleetManager.Web
                
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "   ‚úÖ Migrations appliqu√©es avec succ√®s" -ForegroundColor Green
                } else {
                    Write-Host "   ‚ùå Erreur lors de l'application des migrations" -ForegroundColor Red
                    return $false
                }
            } else {
                Write-Host "   üìã Aucune migration trouv√©e - cr√©ation de la migration initiale..." -ForegroundColor Cyan
                dotnet ef migrations add InitialCreate --project src/Laroche.FleetManager.Infrastructure --startup-project src/Laroche.FleetManager.Web
                
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "   ‚úÖ Migration initiale cr√©√©e" -ForegroundColor Green
                    
                    dotnet ef database update --project src/Laroche.FleetManager.Infrastructure --startup-project src/Laroche.FleetManager.Web
                    
                    if ($LASTEXITCODE -eq 0) {
                        Write-Host "   ‚úÖ Migration initiale appliqu√©e" -ForegroundColor Green
                    } else {
                        Write-Host "   ‚ùå Erreur lors de l'application de la migration initiale" -ForegroundColor Red
                        return $false
                    }
                }
            }
        } else {
            Write-Host "   üìã Dossier Migrations inexistant - cr√©ation de la migration initiale..." -ForegroundColor Cyan
            dotnet ef migrations add InitialCreate --project src/Laroche.FleetManager.Infrastructure --startup-project src/Laroche.FleetManager.Web
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "   ‚úÖ Migration initiale cr√©√©e" -ForegroundColor Green
                
                dotnet ef database update --project src/Laroche.FleetManager.Infrastructure --startup-project src/Laroche.FleetManager.Web
                
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "   ‚úÖ Migration initiale appliqu√©e" -ForegroundColor Green
                } else {
                    Write-Host "   ‚ùå Erreur lors de l'application de la migration initiale" -ForegroundColor Red
                    return $false
                }
            } else {
                Write-Host "   ‚ùå Erreur lors de la cr√©ation de la migration initiale" -ForegroundColor Red
                return $false
            }
        }
        
        return $true
    }
    catch {
        Write-Host "   ‚ùå Erreur lors de l'initialisation de la base de donn√©es: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour tester l'application
function Test-ApplicationStartup {
    Write-Host "üöÄ Test du d√©marrage de l'application..." -ForegroundColor Yellow
    
    try {
        Write-Host "   üìã Build de l'application..." -ForegroundColor Cyan
        dotnet build --configuration Debug --verbosity minimal
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "   ‚ùå Erreur lors du build" -ForegroundColor Red
            return $false
        }
        
        Write-Host "   ‚úÖ Build r√©ussi" -ForegroundColor Green
        Write-Host "   üîÑ D√©marrage de l'application (test rapide)..." -ForegroundColor Cyan
        
        # D√©marrer l'application en arri√®re-plan pour un test rapide
        $appProcess = Start-Process -FilePath "dotnet" -ArgumentList "run --project src/Laroche.FleetManager.Web --no-build" -PassThru -WindowStyle Hidden
        
        # Attendre quelques secondes pour le d√©marrage
        Start-Sleep -Seconds 10
        
        if (-not $appProcess.HasExited) {
            Write-Host "   ‚úÖ Application d√©marr√©e avec succ√®s" -ForegroundColor Green
            Write-Host "   üõë Arr√™t de l'application de test..." -ForegroundColor Cyan
            
            # Arr√™ter le processus de test
            Stop-Process -Id $appProcess.Id -Force -ErrorAction SilentlyContinue
            
            # Attendre un peu pour la fermeture propre
            Start-Sleep -Seconds 2
            
            return $true
        } else {
            Write-Host "   ‚ùå L'application s'est arr√™t√©e de mani√®re inattendue" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "   ‚ùå Erreur lors du test de d√©marrage: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction principale
function Main {
    Write-Host "Phase 1: Test de la connexion PostgreSQL" -ForegroundColor Magenta
    Write-Host "----------------------------------------" -ForegroundColor Magenta
    $connectionOk = Test-PostgreSQLConnection -connStr $ConnectionString
    
    if ($connectionOk -eq $false) {
        Write-Host ""
        Write-Host "‚ùå La connexion PostgreSQL a √©chou√©!" -ForegroundColor Red
        Write-Host "   Veuillez v√©rifier que PostgreSQL est d√©marr√© et accessible" -ForegroundColor Yellow
        Write-Host "   Commande pour d√©marrer PostgreSQL (si install√© localement):" -ForegroundColor Yellow
        Write-Host "   net start postgresql-x64-15" -ForegroundColor White
        Write-Host ""
        Write-Host "   Ou utiliser Docker:" -ForegroundColor Yellow
        Write-Host "   docker run --name postgres-fleet -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres:15" -ForegroundColor White
        return
    }
    
    Write-Host ""
    Write-Host "Phase 2: V√©rification de la configuration" -ForegroundColor Magenta
    Write-Host "-------------------------------------------" -ForegroundColor Magenta
    $configOk = Test-ApplicationConfiguration
    
    if (-not $configOk) {
        Write-Host ""
        Write-Host "‚ùå La configuration de l'application est incorrecte!" -ForegroundColor Red
        Write-Host "   Les param√®tres UseInMemoryDatabase doivent √™tre √† 'false'" -ForegroundColor Yellow
        return
    }
    
    Write-Host ""
    Write-Host "Phase 3: Initialisation de la base de donn√©es" -ForegroundColor Magenta
    Write-Host "-----------------------------------------------" -ForegroundColor Magenta
    $dbOk = Initialize-Database
    
    if (-not $dbOk) {
        Write-Host ""
        Write-Host "‚ùå L'initialisation de la base de donn√©es a √©chou√©!" -ForegroundColor Red
        return
    }
    
    Write-Host ""
    Write-Host "Phase 4: Test de d√©marrage de l'application" -ForegroundColor Magenta
    Write-Host "--------------------------------------------" -ForegroundColor Magenta
    $appOk = Test-ApplicationStartup
    
    Write-Host ""
    Write-Host "üéâ R√âSUM√â DES TESTS" -ForegroundColor Green
    Write-Host "===================" -ForegroundColor Green
    Write-Host "‚úÖ Configuration PostgreSQL: OK" -ForegroundColor Green
    Write-Host "‚úÖ Base de donn√©es initialis√©e: OK" -ForegroundColor Green
    
    if ($appOk) {
        Write-Host "‚úÖ Application d√©marr√©e: OK" -ForegroundColor Green
        Write-Host ""
        Write-Host "üöÄ Votre application FleetSyncManager est maintenant configur√©e pour PostgreSQL!" -ForegroundColor Green
        Write-Host ""
        Write-Host "Pour d√©marrer l'application:" -ForegroundColor White
        Write-Host "dotnet run --project src/Laroche.FleetManager.Web" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "L'application sera accessible sur:" -ForegroundColor White
        Write-Host "https://localhost:5001" -ForegroundColor Cyan
        Write-Host "http://localhost:5000" -ForegroundColor Cyan
    } else {
        Write-Host "‚ö†Ô∏è  Application d√©marr√©e: √âCHEC" -ForegroundColor Yellow
        Write-Host ""
        Write-Host "La configuration PostgreSQL est correcte, mais il peut y avoir des probl√®mes de d√©marrage." -ForegroundColor Yellow
        Write-Host "Essayez de d√©marrer manuellement avec:" -ForegroundColor Yellow
        Write-Host "dotnet run --project src/Laroche.FleetManager.Web" -ForegroundColor Cyan
    }
}

# Ex√©cution du script principal
Main
