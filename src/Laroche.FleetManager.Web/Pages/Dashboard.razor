@page "/dashboard"
@page "/"
@using Laroche.FleetManager.Application.Queries.Vehicles
@using Laroche.FleetManager.Application.Queries.Drivers
@using Laroche.FleetManager.Application.Queries.Maintenances
@using Laroche.FleetManager.Application.Queries.Incidents
@using Laroche.FleetManager.Application.DTOs
@using MediatR
@inject IMediator Mediator

<PageTitle>Tableau de Bord - FleetSync Manager</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="fas fa-tachometer-alt me-2"></i>
                Tableau de Bord - FleetSync Manager
            </h1>
        </div>
    </div>

    <!-- Statistiques -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card bg-primary text-white h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-car me-2"></i>
                        Véhicules
                    </h5>
                    <i class="fas fa-car fa-2x"></i>
                </div>
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            @if (isLoading)
                            {
                                <div class="spinner-border text-light" role="status">
                                    <span class="visually-hidden">Chargement...</span>
                                </div>
                            }
                            else
                            {
                                <div class="h2 mb-0">@vehicleCount</div>
                                <div class="text-white-75">Véhicules actifs</div>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link text-decoration-none" href="/vehicles">
                        Voir tous les véhicules
                        <i class="fas fa-angle-right"></i>
                    </a>
                </div>
            </div>
        </div>

        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card bg-success text-white h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        Conducteurs
                    </h5>
                    <i class="fas fa-users fa-2x"></i>
                </div>
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            @if (isLoading)
                            {
                                <div class="spinner-border text-light" role="status">
                                    <span class="visually-hidden">Chargement...</span>
                                </div>
                            }
                            else
                            {
                                <div class="h2 mb-0">@driverCount</div>
                                <div class="text-white-75">Conducteurs actifs</div>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link text-decoration-none" href="/drivers">
                        Voir tous les conducteurs
                        <i class="fas fa-angle-right"></i>
                    </a>
                </div>
            </div>
        </div>

        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card bg-warning text-white h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-wrench me-2"></i>
                        Maintenances
                    </h5>
                    <i class="fas fa-wrench fa-2x"></i>
                </div>
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            @if (isLoading)
                            {
                                <div class="spinner-border text-light" role="status">
                                    <span class="visually-hidden">Chargement...</span>
                                </div>
                            }
                            else
                            {
                                <div class="h2 mb-0">@maintenanceCount</div>
                                <div class="text-white-75">À prévoir</div>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link text-decoration-none" href="/maintenance">
                        Voir toutes les maintenances
                        <i class="fas fa-angle-right"></i>
                    </a>
                </div>
            </div>
        </div>

        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card bg-danger text-white h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Incidents
                    </h5>
                    <i class="fas fa-exclamation-triangle fa-2x"></i>
                </div>
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            @if (isLoading)
                            {
                                <div class="spinner-border text-light" role="status">
                                    <span class="visually-hidden">Chargement...</span>
                                </div>
                            }
                            else
                            {
                                <div class="h2 mb-0">@incidentCount</div>
                                <div class="text-white-75">Ouverts</div>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link text-decoration-none" href="/incidents">
                        Voir tous les incidents
                        <i class="fas fa-angle-right"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Maintenances à venir et incidents récents -->
    <div class="row">
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-wrench me-1"></i>
                    Prochaines Maintenances (@upcomingMaintenances.Count)
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                            <p class="mt-2 text-muted">Chargement des maintenances...</p>
                        </div>
                    }
                    else if (upcomingMaintenances.Any())
                    {
                        @foreach (var maintenance in upcomingMaintenances.Take(5))
                        {
                            <div class="d-flex align-items-center border-bottom py-3">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-wrench text-warning fa-lg"></i>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <div class="fw-bold">Maintenance programmée</div>
                                    <small class="text-muted">Type: @maintenance.MaintenanceType</small>
                                    <div class="small text-muted">
                                        Prévue le @maintenance.ScheduledDate.ToString("dd/MM/yyyy")
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="text-center mt-3">
                            <a href="/maintenance" class="btn btn-sm btn-outline-primary">
                                Voir toutes les maintenances
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-check-circle fa-3x mb-3 text-success"></i>
                            <p class="mb-0">Aucune maintenance programmée</p>
                            <small>Toutes les maintenances sont à jour</small>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-exclamation-triangle me-1"></i>
                    Incidents Récents (@recentIncidents.Count)
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-danger" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                            <p class="mt-2 text-muted">Chargement des incidents...</p>
                        </div>
                    }
                    else if (recentIncidents.Any())
                    {
                        @foreach (var incident in recentIncidents.Take(5))
                        {
                            <div class="d-flex align-items-center border-bottom py-3">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-exclamation-triangle text-danger fa-lg"></i>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <div class="fw-bold">Incident déclaré</div>
                                    <small class="text-muted">Type: @incident.IncidentType</small>
                                    <div class="small text-muted">
                                        Le @incident.IncidentDate.ToString("dd/MM/yyyy HH:mm")
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="text-center mt-3">
                            <a href="/incidents" class="btn btn-sm btn-outline-danger">
                                Voir tous les incidents
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-smile fa-3x mb-3 text-success"></i>
                            <p class="mb-0">Aucun incident récent</p>
                            <small>Tout va bien dans votre flotte</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Aperçu rapide des véhicules -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-car me-1"></i>
                    Aperçu des Véhicules
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                            <p class="mt-2 text-muted">Chargement des véhicules...</p>
                        </div>
                    }
                    else if (recentVehicles.Any())
                    {
                        <div class="row">
                            @foreach (var vehicle in recentVehicles.Take(4))
                            {
                                <div class="col-lg-3 col-md-6 mb-3">
                                    <div class="card border-left-primary h-100">
                                        <div class="card-body p-3">
                                            <div class="d-flex align-items-center">
                                                <div class="flex-shrink-0">
                                                    <i class="fas fa-car fa-2x text-primary"></i>
                                                </div>
                                                <div class="flex-grow-1 ms-3">
                                                    <div class="fw-bold">@vehicle.LicensePlate</div>
                                                    <small class="text-muted">@vehicle.Brand @vehicle.Model</small>
                                                    <div class="small text-muted">
                                                        @vehicle.CurrentMileage.ToString("N0") km
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="text-center mt-3">
                            <a href="/vehicles" class="btn btn-primary">
                                Voir tous les véhicules (@vehicleCount)
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-car fa-3x mb-3"></i>
                            <p class="mb-0">Aucun véhicule enregistré</p>
                            <a href="/vehicles" class="btn btn-primary mt-2">
                                Ajouter un véhicule
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Message d'erreur -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Erreur lors du chargement des données: @errorMessage
                    <button type="button" class="btn btn-sm btn-outline-danger ms-3" @onclick="LoadDashboardData">
                        <i class="fas fa-redo me-1"></i> Réessayer
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // États de chargement
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    // Données du tableau de bord
    private int vehicleCount = 0;
    private int driverCount = 0;  
    private int maintenanceCount = 0;
    private int incidentCount = 0;

    // Listes pour les sections détaillées
    private List<MaintenanceDto> upcomingMaintenances = new();
    private List<IncidentDto> recentIncidents = new();
    private List<VehicleDto> recentVehicles = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            // Charger les données de façon séquentielle pour éviter les conflits DbContext
            await LoadVehicleCount();
            await LoadDriverCount();
            await LoadMaintenanceCount();
            await LoadIncidentCount();
            await LoadUpcomingMaintenances();
            await LoadRecentIncidents();
            await LoadRecentVehicles();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement du dashboard : {ex.Message}";
            Console.WriteLine($"Erreur dashboard: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadVehicleCount()
    {
        try
        {
            var query = new GetVehiclesQuery { Page = 1, PageSize = 1 };
            var result = await Mediator.Send(query);
            vehicleCount = result.IsSuccess ? result.Data!.TotalCount : 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement véhicules: {ex.Message}");
            vehicleCount = 0;
        }
    }

    private async Task LoadDriverCount()
    {
        try
        {
            var query = new GetAllDriversQuery { Page = 1, PageSize = 1 };
            var result = await Mediator.Send(query);
            driverCount = result.IsSuccess ? result.Data!.TotalCount : 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement conducteurs: {ex.Message}");
            driverCount = 0;
        }
    }

    private async Task LoadMaintenanceCount()
    {
        try
        {
            var query = new GetAllMaintenancesQuery { Page = 1, PageSize = 1 };
            var result = await Mediator.Send(query);
            maintenanceCount = result.IsSuccess ? result.Data!.TotalCount : 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement maintenances: {ex.Message}");
            maintenanceCount = 0;
        }
    }

    private async Task LoadIncidentCount()
    {
        try
        {
            var query = new GetAllIncidentsQuery { Page = 1, PageSize = 1 };
            var result = await Mediator.Send(query);
            incidentCount = result.IsSuccess ? result.Data!.TotalCount : 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement incidents: {ex.Message}");
            incidentCount = 0;
        }
    }

    private async Task LoadUpcomingMaintenances()
    {
        try
        {
            var query = new GetAllMaintenancesQuery { Page = 1, PageSize = 5 };
            var result = await Mediator.Send(query);
            upcomingMaintenances = result.IsSuccess ? result.Data!.Items.ToList() : new List<MaintenanceDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement maintenances à venir: {ex.Message}");
            upcomingMaintenances = new List<MaintenanceDto>();
        }
    }

    private async Task LoadRecentIncidents()
    {
        try
        {
            var query = new GetAllIncidentsQuery { Page = 1, PageSize = 5 };
            var result = await Mediator.Send(query);
            recentIncidents = result.IsSuccess ? result.Data!.Items.ToList() : new List<IncidentDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement incidents récents: {ex.Message}");
            recentIncidents = new List<IncidentDto>();
        }
    }

    private async Task LoadRecentVehicles()
    {
        try
        {
            var query = new GetVehiclesQuery { Page = 1, PageSize = 4 };
            var result = await Mediator.Send(query);
            recentVehicles = result.IsSuccess ? result.Data!.Items.ToList() : new List<VehicleDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement véhicules récents: {ex.Message}");
            recentVehicles = new List<VehicleDto>();
        }
    }
}