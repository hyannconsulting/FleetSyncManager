@page "/auth/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Laroche.FleetManager.Web.Models.Auth
@using Laroche.FleetManager.Web.Services.Auth
@inject IAuthApiService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Connexion - FleetSyncManager</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center">
                    <h3 class="mb-0">
                        <i class="fas fa-sign-in-alt me-2"></i>
                        Connexion
                    </h3>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @ErrorMessage
                        </div>
                    }

                    @if (LoginResult != null && !LoginResult.IsSuccess && LoginResult.Errors.Any())
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <ul class="mb-0">
                                @foreach (var error in LoginResult.Errors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }

                    <EditForm Model="@LoginModel" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope me-1"></i>
                                Adresse e-mail
                            </label>
                            <InputText id="email" 
                                      @bind-Value="LoginModel.Email" 
                                      class="form-control" 
                                      placeholder="votre-email@exemple.com"
                                      disabled="@IsLoading" />
                            <ValidationMessage For="@(() => LoginModel.Email)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">
                                <i class="fas fa-lock me-1"></i>
                                Mot de passe
                            </label>
                            <InputText id="password" 
                                      @bind-Value="LoginModel.Password" 
                                      type="password" 
                                      class="form-control" 
                                      placeholder="Votre mot de passe"
                                      disabled="@IsLoading" />
                            <ValidationMessage For="@(() => LoginModel.Password)" class="text-danger small" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox id="remember" 
                                          @bind-Value="LoginModel.RememberMe" 
                                          class="form-check-input"
                                          disabled="@IsLoading" />
                            <label class="form-check-label" for="remember">
                                Se souvenir de moi
                            </label>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" 
                                   class="btn btn-primary" 
                                   disabled="@IsLoading">
                                @if (IsLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Connexion en cours...</span>
                                }
                                else
                                {
                                    <i class="fas fa-sign-in-alt me-2"></i>
                                    <span>Se connecter</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <hr class="my-4">

                    <div class="text-center">
                        <a href="/auth/forgot-password" class="text-decoration-none">
                            <i class="fas fa-question-circle me-1"></i>
                            Mot de passe oublié ?
                        </a>
                    </div>

                    <div class="text-center mt-3">
                        <small class="text-muted">
                            Pas encore de compte ? 
                            <a href="/auth/register" class="text-decoration-none">
                                S'inscrire ici
                            </a>
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel LoginModel = new();
    private Laroche.FleetManager.Web.Models.Auth.LoginResult? LoginResult;
    private string ErrorMessage = string.Empty;
    private bool IsLoading = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Vérifier si l'utilisateur est déjà connecté
        var currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            var returnUrl = ReturnUrl ?? "/";
            Navigation.NavigateTo(returnUrl, replace: true);
        }
    }

    private async Task HandleLogin()
    {
        if (IsLoading) return;

        ErrorMessage = string.Empty;
        LoginResult = null;
        IsLoading = true;

        try
        {
            LoginResult = await AuthService.LoginAsync(LoginModel.Email, LoginModel.Password);

            if (LoginResult.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Connexion réussie");
                
                // Redirection vers la page demandée ou vers l'accueil
                var returnUrl = ReturnUrl ?? "/";
                Navigation.NavigateTo(returnUrl, replace: true);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Une erreur inattendue s'est produite lors de la connexion.";
            await JSRuntime.InvokeVoidAsync("console.error", "Erreur de connexion:", ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}

<style>
    .card {
        border-radius: 10px;
        border: none;
    }

    .card-header {
        border-radius: 10px 10px 0 0 !important;
    }

    .form-control:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .btn-primary:hover {
        background-color: #0b5ed7;
        border-color: #0a58ca;
    }

    .alert {
        border-radius: 8px;
    }
</style>
