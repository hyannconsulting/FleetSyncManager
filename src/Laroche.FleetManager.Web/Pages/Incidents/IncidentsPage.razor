@page "/incidents"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using MediatR
@using Laroche.FleetManager.Application.Queries.Incidents
@using Laroche.FleetManager.Application.Commands.Incidents
@using Laroche.FleetManager.Application.DTOs
@using Laroche.FleetManager.Application.Common
@inject IMediator Mediator
@inject IJSRuntime JSRuntime

<PageTitle>Incidents</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-exclamation-triangle me-2"></i>Gestion des Incidents
                    </h5>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus me-1"></i>Nouvel Incident
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                        </div>
                    }
                    else if (pagedResult?.Items.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Véhicule</th>
                                        <th>Conducteur</th>
                                        <th>Type</th>
                                        <th>Sévérité</th>
                                        <th>Statut</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var incident in pagedResult.Items)
                                    {
                                        <tr>
                                            <td>@incident.IncidentDate.ToString("dd/MM/yyyy HH:mm")</td>
                                            <td>@incident.VehicleLicensePlate</td>
                                            <td>@incident.DriverName</td>
                                            <td>@incident.IncidentType</td>
                                            <td>
                                                <span class="badge bg-@(GetSeverityBadgeClass(incident.Severity.ToString()))">
                                                    @incident.Severity
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge bg-@(GetStatusBadgeClass(incident.Status))">
                                                    @incident.Status
                                                </span>
                                            </td>
                                            <td>
                                                @if (incident.Status == "Open")
                                                {
                                                    <button class="btn btn-sm btn-outline-success me-1" 
                                                            @onclick="() => ResolveIncident(incident.Id)"
                                                            title="Résoudre">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                }
                                                <button class="btn btn-sm btn-outline-primary me-1" 
                                                        @onclick="() => ShowEditModal(incident)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => DeleteIncident(incident.Id)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (pagedResult.TotalPages > 1)
                        {
                            <nav>
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadIncidents(1)">Premier</button>
                                    </li>
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadIncidents(currentPage - 1)">Précédent</button>
                                    </li>
                                    
                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                                    {
                                        int pageNumber = i;
                                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => LoadIncidents(pageNumber)">@pageNumber</button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadIncidents(currentPage + 1)">Suivant</button>
                                    </li>
                                    <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadIncidents(pagedResult.TotalPages)">Dernier</button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center">
                            <p>Aucun incident trouvé.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de création/édition -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(editingIncident == null ? "Nouvel Incident" : "Modifier Incident")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="incidentForm" OnValidSubmit="SaveIncident">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Véhicule *</label>
                                    <InputNumber @bind-Value="incidentForm.VehicleId" class="form-control" />
                                    <ValidationMessage For="() => incidentForm.VehicleId" />
                                    <div class="form-text">ID du véhicule impliqué</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Conducteur</label>
                                    <InputNumber @bind-Value="incidentForm.DriverId" class="form-control" />
                                    <div class="form-text">ID du conducteur (optionnel)</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Date de l'incident *</label>
                                    <InputDate @bind-Value="incidentForm.IncidentDate" class="form-control" />
                                    <ValidationMessage For="() => incidentForm.IncidentDate" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Type d'incident *</label>
                                    <InputSelect @bind-Value="incidentForm.IncidentType" class="form-select">
                                        <option value="">Sélectionner...</option>
                                        <option value="Accident">Accident</option>
                                        <option value="Breakdown">Panne</option>
                                        <option value="Theft">Vol</option>
                                        <option value="Vandalism">Vandalisme</option>
                                        <option value="Speeding">Excès de vitesse</option>
                                        <option value="Other">Autre</option>
                                    </InputSelect>
                                    <ValidationMessage For="() => incidentForm.IncidentType" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Sévérité *</label>
                                    <InputSelect @bind-Value="incidentForm.Severity" class="form-select">
                                        <option value="">Sélectionner...</option>
                                        <option value="Low">Faible</option>
                                        <option value="Medium">Moyenne</option>
                                        <option value="High">Élevée</option>
                                        <option value="Critical">Critique</option>
                                    </InputSelect>
                                    <ValidationMessage For="() => incidentForm.Severity" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Statut</label>
                                    <InputSelect @bind-Value="incidentForm.Status" class="form-select">
                                        <option value="Open">Ouvert</option>
                                        <option value="UnderInvestigation">En enquête</option>
                                        <option value="Resolved">Résolu</option>
                                        <option value="Closed">Fermé</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Lieu</label>
                            <InputText @bind-Value="incidentForm.Location" class="form-control" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Description *</label>
                            <InputTextArea @bind-Value="incidentForm.Description" class="form-control" rows="4" />
                            <ValidationMessage For="() => incidentForm.Description" />
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Coût estimé</label>
                                    <div class="input-group">
                                        <InputNumber @bind-Value="incidentForm.EstimatedCost" class="form-control" step="0.01" />
                                        <span class="input-group-text">€</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Date de résolution</label>
                                    <InputDate @bind-Value="incidentForm.ResolvedDate" class="form-control" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Responsable de l'enquête</label>
                            <InputText @bind-Value="incidentForm.InvestigatedBy" class="form-control" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Notes d'enquête</label>
                            <InputTextArea @bind-Value="incidentForm.InvestigationNotes" class="form-control" rows="3" />
                        </div>
                        
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">
                                Annuler
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                @(editingIncident == null ? "Créer" : "Modifier")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PagedResult<IncidentDto>? pagedResult;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showModal = false;
    private int currentPage = 1;
    private int pageSize = 10;
    
    private IncidentDto? editingIncident;
    private IncidentForm incidentForm = new();
    
    public class IncidentForm
    {
        [Required(ErrorMessage = "Le véhicule est requis")]
        public int VehicleId { get; set; }
        
        public int? DriverId { get; set; }
        
        [Required(ErrorMessage = "La date de l'incident est requise")]
        public DateTime IncidentDate { get; set; } = DateTime.Now;
        
        [Required(ErrorMessage = "Le type d'incident est requis")]
        public string IncidentType { get; set; } = "";
        
        [Required(ErrorMessage = "La sévérité est requise")]
        public string Severity { get; set; } = "";
        
        public string Status { get; set; } = "Open";
        public string? Location { get; set; }
        
        [Required(ErrorMessage = "La description est requise")]
        public string Description { get; set; } = "";
        
        public decimal? EstimatedCost { get; set; }
        public DateTime? ResolvedDate { get; set; }
        public string? InvestigatedBy { get; set; }
        public string? InvestigationNotes { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadIncidents();
    }
    
    private async Task LoadIncidents(int page = 1)
    {
        isLoading = true;
        currentPage = page;
        
        try
        {
            var query = new GetAllIncidentsQuery
            {
                Page = currentPage,
                PageSize = pageSize
            };
            
            var result = await Mediator.Send(query);
            
            if (result.IsSuccess && result.Value != null)
            {
                pagedResult = result.Value;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erreur lors du chargement des incidents");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void ShowCreateModal()
    {
        editingIncident = null;
        incidentForm = new IncidentForm();
        showModal = true;
    }
    
    private void ShowEditModal(IncidentDto incident)
    {
        editingIncident = incident;
        incidentForm = new IncidentForm
        {
            VehicleId = incident.VehicleId,
            DriverId = incident.DriverId,
            IncidentDate = incident.IncidentDate,
            IncidentType = incident.IncidentType,
            Severity = incident.Severity.ToString(),
            Status = incident.Status,
            Location = incident.Location,
            Description = incident.Description,
            EstimatedCost = incident.EstimatedCost,
            ResolvedDate = incident.ResolvedDate,
            InvestigatedBy = incident.InvestigatedBy,
            InvestigationNotes = incident.InvestigationNotes
        };
        showModal = true;
    }
    
    private void CloseModal()
    {
        showModal = false;
        editingIncident = null;
        incidentForm = new IncidentForm();
    }
    
    private async Task SaveIncident()
    {
        isSaving = true;
        StateHasChanged();
        
        try
        {
            if (editingIncident == null)
            {
                // Création
                var command = new CreateIncidentCommand
                {
                    VehicleId = incidentForm.VehicleId,
                    DriverId = incidentForm.DriverId,
                    IncidentDate = incidentForm.IncidentDate,
                    IncidentType = incidentForm.IncidentType,
                    Severity = incidentForm.Severity,
                    Status = incidentForm.Status,
                    Location = incidentForm.Location,
                    Description = incidentForm.Description,
                    EstimatedCost = incidentForm.EstimatedCost,
                    ResolvedDate = incidentForm.ResolvedDate,
                    InvestigatedBy = incidentForm.InvestigatedBy,
                    InvestigationNotes = incidentForm.InvestigationNotes
                };
                
                var result = await Mediator.Send(command);
                
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Incident créé avec succès");
                    CloseModal();
                    await LoadIncidents(currentPage);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la création de l'incident");
                }
            }
            else
            {
                // Modification
                var command = new UpdateIncidentCommand
                {
                    Id = editingIncident.Id,
                    VehicleId = incidentForm.VehicleId,
                    DriverId = incidentForm.DriverId,
                    IncidentDate = incidentForm.IncidentDate,
                    IncidentType = incidentForm.IncidentType,
                    Severity = incidentForm.Severity,
                    Status = incidentForm.Status,
                    Location = incidentForm.Location,
                    Description = incidentForm.Description,
                    EstimatedCost = incidentForm.EstimatedCost,
                    ResolvedDate = incidentForm.ResolvedDate,
                    InvestigatedBy = incidentForm.InvestigatedBy,
                    InvestigationNotes = incidentForm.InvestigationNotes
                };
                
                var result = await Mediator.Send(command);
                
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Incident modifié avec succès");
                    CloseModal();
                    await LoadIncidents(currentPage);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la modification de l'incident");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private async Task ResolveIncident(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Marquer cet incident comme résolu ?"))
        {
            try
            {
                var command = new ResolveIncidentCommand(id);
                var result = await Mediator.Send(command);
                
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Incident marqué comme résolu");
                    await LoadIncidents(currentPage);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la résolution de l'incident");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
            }
        }
    }
    
    private async Task DeleteIncident(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer cet incident ?"))
        {
            try
            {
                var command = new DeleteIncidentCommand(id);
                var result = await Mediator.Send(command);
                
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Incident supprimé avec succès");
                    await LoadIncidents(currentPage);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la suppression de l'incident");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
            }
        }
    }
    
    private static string GetStatusBadgeClass(string status) => status?.ToLower() switch
    {
        "open" => "danger",
        "underinvestigation" => "warning",
        "resolved" => "success",
        "closed" => "secondary",
        _ => "secondary"
    };
    
    private static string GetSeverityBadgeClass(string severity) => severity?.ToLower() switch
    {
        "low" => "success",
        "medium" => "warning",
        "high" => "danger",
        "critical" => "dark",
        _ => "secondary"
    };
}
