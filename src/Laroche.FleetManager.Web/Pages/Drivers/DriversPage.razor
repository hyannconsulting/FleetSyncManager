@page "/drivers"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Laroche.FleetManager.Web.Services.Interfaces
@using Laroche.FleetManager.Application.DTOs
@using Laroche.FleetManager.Application.Common

<PageTitle>Conducteurs</PageTitle>

<!-- Système de notifications -->
@if (!string.IsNullOrEmpty(notificationMessage))
{
    <div class="alert alert-@notificationType alert-dismissible fade show" role="alert">
        @notificationMessage
        <button type="button" class="btn-close" @onclick="() => ClearNotification()"></button>
    </div>
}

<!-- Modal de confirmation -->
@if (showConfirmModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="btn-close" @onclick="() => CancelConfirmation()"></button>
                </div>
                <div class="modal-body">
                    @confirmationMessage
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => CancelConfirmation()">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="() => ConfirmAction()">Confirmer</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-users me-2"></i>Gestion des Conducteurs
                    </h5>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus me-1"></i>Nouveau Conducteur
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                        </div>
                    }
                    else if (pagedResult?.Items.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Prénom</th>
                                        <th>Nom</th>
                                        <th>Téléphone</th>
                                        <th>Email</th>
                                        <th>Statut</th>
                                        <th>Permis</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var driver in pagedResult.Items)
                                    {
                                        <tr>
                                            <td>@driver.FirstName</td>
                                            <td>@driver.LastName</td>
                                            <td>@driver.PhoneNumber</td>
                                            <td>@driver.Email</td>
                                            <td>
                                                <span class="badge bg-@(GetStatusBadgeClass(driver.Status))">
                                                    @driver.Status
                                                </span>
                                            </td>
                                            <td>
                                                @if (driver.LicenseExpiryDate.HasValue)
                                                {
                                                    var isExpired = driver.LicenseExpiryDate.Value < DateTime.Now;
                                                    <span class="badge bg-@(isExpired ? "danger" : "success")">
                                                        @(isExpired ? "Expiré" : "Valide")
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-1" 
                                                        @onclick="() => ShowEditModal(driver)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => DeleteDriver(driver.Id)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (pagedResult.TotalPages > 1)
                        {
                            <nav>
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadDrivers(1)">Premier</button>
                                    </li>
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadDrivers(currentPage - 1)">Précédent</button>
                                    </li>
                                    
                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                                    {
                                        int pageNumber = i;
                                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => LoadDrivers(pageNumber)">@pageNumber</button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadDrivers(currentPage + 1)">Suivant</button>
                                    </li>
                                    <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadDrivers(pagedResult.TotalPages)">Dernier</button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center">
                            <p>Aucun conducteur trouvé.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de création/édition -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(editingDriver == null ? "Nouveau Conducteur" : "Modifier Conducteur")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="driverForm" OnValidSubmit="SaveDriver">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Prénom *</label>
                                    <InputText @bind-Value="driverForm.FirstName" class="form-control" />
                                    <ValidationMessage For="() => driverForm.FirstName" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Nom *</label>
                                    <InputText @bind-Value="driverForm.LastName" class="form-control" />
                                    <ValidationMessage For="() => driverForm.LastName" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Email *</label>
                                    <InputText @bind-Value="driverForm.Email" class="form-control" type="email" />
                                    <ValidationMessage For="() => driverForm.Email" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Téléphone *</label>
                                    <InputText @bind-Value="driverForm.PhoneNumber" class="form-control" />
                                    <ValidationMessage For="() => driverForm.PhoneNumber" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Date de naissance</label>
                                    <InputDate @bind-Value="driverForm.DateOfBirth" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Date d'embauche</label>
                                    <InputDate @bind-Value="driverForm.HireDate" class="form-control" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Statut *</label>
                                    <InputSelect @bind-Value="driverForm.Status" class="form-select">
                                        <option value="">Sélectionner...</option>
                                        <option value="Active">Actif</option>
                                        <option value="Inactive">Inactif</option>
                                        <option value="OnLeave">En congé</option>
                                        <option value="Terminated">Licencié</option>
                                    </InputSelect>
                                    <ValidationMessage For="() => driverForm.Status" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Numéro de permis</label>
                                    <InputText @bind-Value="driverForm.LicenseNumber" class="form-control" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Type de permis</label>
                                    <InputSelect @bind-Value="driverForm.LicenseType" class="form-select">
                                        <option value="">Sélectionner...</option>
                                        <option value="B">Permis B</option>
                                        <option value="C">Permis C</option>
                                        <option value="D">Permis D</option>
                                        <option value="BE">Permis BE</option>
                                        <option value="CE">Permis CE</option>
                                        <option value="DE">Permis DE</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Date d'expiration du permis</label>
                                    <InputDate @bind-Value="driverForm.LicenseExpiryDate" class="form-control" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Adresse</label>
                            <InputTextArea @bind-Value="driverForm.Address" class="form-control" rows="2" />
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Contact d'urgence - Nom</label>
                                    <InputText @bind-Value="driverForm.EmergencyContactName" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Contact d'urgence - Téléphone</label>
                                    <InputText @bind-Value="driverForm.EmergencyContactPhone" class="form-control" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <InputTextArea @bind-Value="driverForm.Notes" class="form-control" rows="3" />
                        </div>
                        
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">
                                Annuler
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                @(editingDriver == null ? "Créer" : "Modifier")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Variables d'état de la page
    [Inject] private IDriverApiService DriverApiService { get; set; } = default!;

    private PagedResult<DriverDto>? pagedResult;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showModal = false;
    private int currentPage = 1;
    private int pageSize = 10;
    
    // Variables pour le système de notifications
    private string? notificationMessage;
    private string notificationType = "info";
    
    // Variables pour le système de confirmation
    private bool showConfirmModal = false;
    private string? confirmationMessage;
    private Func<Task>? pendingAction;
    
    private DriverDto? editingDriver;
    private DriverForm driverForm = new();
    
    public class DriverForm
    {
        [Required(ErrorMessage = "Le prénom est requis")]
        [StringLength(50, ErrorMessage = "Le prénom ne peut pas dépasser 50 caractères")]
        public string FirstName { get; set; } = "";
        
        [Required(ErrorMessage = "Le nom est requis")]
        [StringLength(50, ErrorMessage = "Le nom ne peut pas dépasser 50 caractères")]
        public string LastName { get; set; } = "";
        
        [Required(ErrorMessage = "L'email est requis")]
        [EmailAddress(ErrorMessage = "Format d'email invalide")]
        public string Email { get; set; } = "";
        
        [Required(ErrorMessage = "Le numéro de téléphone est requis")]
        [Phone(ErrorMessage = "Format de téléphone invalide")]
        public string PhoneNumber { get; set; } = "";
        
        public DateTime DateOfBirth { get; set; }
        public DateTime? HireDate { get; set; }
        
        [Required(ErrorMessage = "Le statut est requis")]
        public string Status { get; set; } = "";
        
        public string LicenseNumber { get; set; } = "";
        public string LicenseType { get; set; } = "";
        public DateTime LicenseExpiryDate { get; set; } = DateTime.Now;
        public string? Address { get; set; }
        public string? EmergencyContactName { get; set; }
        public string? EmergencyContactPhone { get; set; }
        public string? Notes { get; set; }
    }
    
    // Méthodes de notification
    private void ShowNotification(string message, string type = "info")
    {
        notificationMessage = message;
        notificationType = type;
        StateHasChanged();
        
        // Auto-effacement après 5 secondes
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            await InvokeAsync(() =>
            {
                ClearNotification();
                StateHasChanged();
            });
        });
    }
    
    private void ClearNotification()
    {
        notificationMessage = null;
        notificationType = "info";
    }
    
    // Méthodes de confirmation
    private void ShowConfirmation(string message, Func<Task> action)
    {
        confirmationMessage = message;
        pendingAction = action;
        showConfirmModal = true;
        StateHasChanged();
    }
    
    private void CancelConfirmation()
    {
        showConfirmModal = false;
        confirmationMessage = null;
        pendingAction = null;
        StateHasChanged();
    }
    
    private async Task ConfirmAction()
    {
        if (pendingAction != null)
        {
            await pendingAction();
        }
        
        showConfirmModal = false;
        confirmationMessage = null;
        pendingAction = null;
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDrivers();
    }
    
    private async Task LoadDrivers(int page = 1)
    {
        isLoading = true;
        currentPage = page;

        try
        {
            pagedResult = await DriverApiService.GetPagedAsync(currentPage, pageSize);
            if (pagedResult == null || pagedResult.Items == null)
            {
                ShowNotification("Erreur lors du chargement des conducteurs", "danger");
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Erreur: {ex.Message}", "danger");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void ShowCreateModal()
    {
        editingDriver = null;
        driverForm = new DriverForm();
        showModal = true;
    }
    
    private void ShowEditModal(DriverDto driver)
    {
        editingDriver = driver;
        driverForm = new DriverForm
        {
            FirstName = driver.FirstName,
            LastName = driver.LastName,
            Email = driver.Email,
            PhoneNumber = driver.PhoneNumber ?? string.Empty,
            DateOfBirth = driver.DateOfBirth,
            HireDate = driver.HireDate,
            Status = driver.Status,
            LicenseNumber = driver.LicenseNumber,
            // LicenseType = driver.LicenseType,
            LicenseExpiryDate = driver.LicenseExpiryDate ?? DateTime.Now,
            Address = driver.Address,
            EmergencyContactName = driver.EmergencyContactName,
            EmergencyContactPhone = driver.EmergencyContactPhone,
            Notes = driver.Notes
        };
        showModal = true;
    }
    
    private void CloseModal()
    {
        showModal = false;
        editingDriver = null;
        driverForm = new DriverForm();
    }
    
    private async Task SaveDriver()
    {
        isSaving = true;
        StateHasChanged();

        try
        {
            if (editingDriver == null)
            {
                // Création
                var createCommand = new CreateDriverCommand
                {
                    FirstName = driverForm.FirstName,
                    LastName = driverForm.LastName,
                    Email = driverForm.Email,
                    PhoneNumber = driverForm.PhoneNumber,
                    DateOfBirth = driverForm.DateOfBirth,
                    HireDate = driverForm.HireDate ?? DateTime.Now,
                    Status = driverForm.Status,
                    LicenseNumber = driverForm.LicenseNumber,
                    LicenseType = driverForm.LicenseType,
                    LicenseExpiryDate = driverForm.LicenseExpiryDate,
                    Address = driverForm.Address,
                    EmergencyContactName = driverForm.EmergencyContactName,
                    EmergencyContactPhone = driverForm.EmergencyContactPhone,
                    Notes = driverForm.Notes
                };

                var result = await DriverApiService.CreateAsync(createCommand);

                if (result != null)
                {
                    ShowNotification("Conducteur créé avec succès", "success");
                    CloseModal();
                    await LoadDrivers(currentPage);
                }
                else
                {
                    ShowNotification("Erreur lors de la création du conducteur", "danger");
                }
            }
            else
            {
                // Modification
                var updateCommand = new UpdateDriverCommand
                {
                    Id = editingDriver.Id,
                    FirstName = driverForm.FirstName,
                    LastName = driverForm.LastName,
                    Email = driverForm.Email,
                    PhoneNumber = driverForm.PhoneNumber,
                    DateOfBirth = driverForm.DateOfBirth,
                    HireDate = driverForm.HireDate ?? DateTime.Now,
                    Status = driverForm.Status,
                    LicenseNumber = driverForm.LicenseNumber,
                    LicenseType = driverForm.LicenseType,
                    LicenseExpiryDate = driverForm.LicenseExpiryDate,
                    Address = driverForm.Address,
                    EmergencyContactName = driverForm.EmergencyContactName,
                    EmergencyContactPhone = driverForm.EmergencyContactPhone,
                    // Notes = driverForm.Notes
                };

                var result = await DriverApiService.UpdateAsync(editingDriver.Id, updateCommand);

                if (result!= null)
                {
                    ShowNotification("Conducteur modifié avec succès", "success");
                    CloseModal();
                    await LoadDrivers(currentPage);
                }
                else
                {
                    ShowNotification("Erreur lors de la modification du conducteur", "danger");
                }
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Erreur: {ex.Message}", "danger");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private void DeleteDriver(int id)
    {
        ShowConfirmation("Êtes-vous sûr de vouloir supprimer ce conducteur ?", async () =>
        {
            try
            {
                var result = await DriverApiService.DeleteAsync(id);
                if (result)
                {
                    ShowNotification("Conducteur supprimé avec succès", "success");
                    await LoadDrivers(currentPage);
                }
                else
                {
                    ShowNotification("Erreur lors de la suppression du conducteur", "danger");
                }
            }
            catch (Exception ex)
            {
                ShowNotification($"Erreur: {ex.Message}", "danger");
            }
        });
    }
    
    private static string GetStatusBadgeClass(string status) => status?.ToLower() switch
    {
        "active" => "success",
        "inactive" => "secondary",
        "onleave" => "warning",
        "terminated" => "danger",
        _ => "secondary"
    };
}
