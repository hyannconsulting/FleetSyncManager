@page "/maintenances"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Laroche.FleetManager.Web.Services.Interfaces
@using Laroche.FleetManager.Application.DTOs
@using Laroche.FleetManager.Application.Common

@inject IJSRuntime JSRuntime

<PageTitle>Maintenances</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-tools me-2"></i>Gestion des Maintenances
                    </h5>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus me-1"></i>Nouvelle Maintenance
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                        </div>
                    }
                    else if (pagedResult?.Items.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Véhicule</th>
                                        <th>Type</th>
                                        <th>Date prévue</th>
                                        <th>Statut</th>
                                        <th>Priorité</th>
                                        <th>Coût</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var maintenance in pagedResult.Items)
                                    {
                                        <tr>
                                            <td>@maintenance.VehicleLicensePlate</td>
                                            <td>@maintenance.MaintenanceType</td>
                                            <td>@maintenance.ScheduledDate.ToString("dd/MM/yyyy")</td>
                                            <td>
                                                <span class="badge bg-@(GetStatusBadgeClass(maintenance.Status))">
                                                    @maintenance.Status
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge bg-@(GetPriorityBadgeClass(maintenance.Priority))">
                                                    @maintenance.Priority
                                                </span>
                                            </td>
                                            <td>
                                                @if (maintenance.ActualCost.HasValue)
                                                {
                                                    <span>@maintenance.ActualCost.Value.ToString("C")</span>
                                                }
                                                else if (maintenance.EstimatedCost.HasValue)
                                                {
                                                    <span class="text-muted">~@maintenance.EstimatedCost.Value.ToString("C")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                @if (maintenance.Status == "Scheduled" || maintenance.Status == "InProgress")
                                                {
                                                    <button class="btn btn-sm btn-outline-success me-1" 
                                                            @onclick="() => CompleteMaintenance(maintenance.Id)"
                                                            title="Terminer">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                }
                                                <button class="btn btn-sm btn-outline-primary me-1" 
                                                        @onclick="() => ShowEditModal(maintenance)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => DeleteMaintenance(maintenance.Id)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (pagedResult.TotalPages > 1)
                        {
                            <nav>
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadMaintenances(1)">Premier</button>
                                    </li>
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadMaintenances(currentPage - 1)">Précédent</button>
                                    </li>
                                    
                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                                    {
                                        int pageNumber = i;
                                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => LoadMaintenances(pageNumber)">@pageNumber</button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadMaintenances(currentPage + 1)">Suivant</button>
                                    </li>
                                    <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadMaintenances(pagedResult.TotalPages)">Dernier</button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center">
                            <p>Aucune maintenance trouvée.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de création/édition -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(editingMaintenance == null ? "Nouvelle Maintenance" : "Modifier Maintenance")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="maintenanceForm" OnValidSubmit="SaveMaintenance">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Véhicule *</label>
                                    <InputNumber @bind-Value="maintenanceForm.VehicleId" class="form-control" />
                                    <ValidationMessage For="() => maintenanceForm.VehicleId" />
                                    <div class="form-text">ID du véhicule concerné</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Type de maintenance *</label>
                                    <InputSelect @bind-Value="maintenanceForm.MaintenanceType" class="form-select">
                                        <option value="">Sélectionner...</option>
                                        <option value="Preventive">Préventive</option>
                                        <option value="Corrective">Corrective</option>
                                        <option value="Emergency">Urgence</option>
                                        <option value="Inspection">Inspection</option>
                                    </InputSelect>
                                    <ValidationMessage For="() => maintenanceForm.MaintenanceType" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Date prévue *</label>
                                    <InputDate @bind-Value="maintenanceForm.ScheduledDate" class="form-control" />
                                    <ValidationMessage For="() => maintenanceForm.ScheduledDate" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Priorité *</label>
                                    <InputSelect @bind-Value="maintenanceForm.Priority" class="form-select">
                                        <option value="">Sélectionner...</option>
                                        <option value="Low">Basse</option>
                                        <option value="Medium">Moyenne</option>
                                        <option value="High">Élevée</option>
                                        <option value="Critical">Critique</option>
                                    </InputSelect>
                                    <ValidationMessage For="() => maintenanceForm.Priority" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Statut</label>
                                    <InputSelect @bind-Value="maintenanceForm.Status" class="form-select">
                                        <option value="Scheduled">Planifiée</option>
                                        <option value="InProgress">En cours</option>
                                        <option value="Completed">Terminée</option>
                                        <option value="Cancelled">Annulée</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Coût estimé</label>
                                    <div class="input-group">
                                        <InputNumber @bind-Value="maintenanceForm.EstimatedCost" class="form-control" step="0.01" />
                                        <span class="input-group-text">€</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Date de début</label>
                                    <InputDate @bind-Value="maintenanceForm.StartDate" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Date de fin</label>
                                    <InputDate @bind-Value="maintenanceForm.EndDate" class="form-control" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Fournisseur</label>
                            <InputText @bind-Value="maintenanceForm.Vendor" class="form-control" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea @bind-Value="maintenanceForm.Description" class="form-control" rows="3" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <InputTextArea @bind-Value="maintenanceForm.Notes" class="form-control" rows="3" />
                        </div>
                        
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">
                                Annuler
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                @(editingMaintenance == null ? "Créer" : "Modifier")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] private IMaintenanceApiService MaintenanceApiService { get; set; } = default!;

    private PagedResult<MaintenanceDto>? pagedResult;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showModal = false;
    private int currentPage = 1;
    private int pageSize = 10;
    
    private MaintenanceDto? editingMaintenance;
    private MaintenanceForm maintenanceForm = new();
    
    public class MaintenanceForm
    {
        [Required(ErrorMessage = "Le véhicule est requis")]
        public int VehicleId { get; set; }
        
        [Required(ErrorMessage = "Le type de maintenance est requis")]
        public string MaintenanceType { get; set; } = "";
        
        [Required(ErrorMessage = "La date prévue est requise")]
        public DateTime ScheduledDate { get; set; } = DateTime.Today.AddDays(1);
        
        [Required(ErrorMessage = "La priorité est requise")]
        public string Priority { get; set; } = "";
        
        public string Status { get; set; } = "Scheduled";
        public decimal? EstimatedCost { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string? Vendor { get; set; }
        public string? Description { get; set; }
        public string? Notes { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMaintenances();
    }
    
    private async Task LoadMaintenances(int page = 1)
    {
        isLoading = true;
        currentPage = page;

        try
        {
            pagedResult = await MaintenanceApiService.GetPagedAsync(currentPage, pageSize);
            if (pagedResult == null || pagedResult.Items == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erreur lors du chargement des maintenances");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void ShowCreateModal()
    {
        editingMaintenance = null;
        maintenanceForm = new MaintenanceForm();
        showModal = true;
    }
    
    private void ShowEditModal(MaintenanceDto maintenance)
    {
        editingMaintenance = maintenance;
        maintenanceForm = new MaintenanceForm
        {
            VehicleId = maintenance.VehicleId,
            MaintenanceType = maintenance.MaintenanceType,
            ScheduledDate = maintenance.ScheduledDate,
            Priority = maintenance.Priority,
            Status = maintenance.Status,
            EstimatedCost = maintenance.EstimatedCost,
            StartDate = maintenance.StartDate,
            EndDate = maintenance.EndDate,
            Vendor = maintenance.Vendor,
            Description = maintenance.Description,
            Notes = maintenance.Notes
        };
        showModal = true;
    }
    
    private void CloseModal()
    {
        showModal = false;
        editingMaintenance = null;
        maintenanceForm = new MaintenanceForm();
    }
    
    private async Task SaveMaintenance()
    {
        isSaving = true;
        StateHasChanged();

        try
        {
            if (editingMaintenance == null)
            {
                // Création
                var createCommand = new CreateMaintenanceCommand
                {
                    VehicleId = maintenanceForm.VehicleId,
                    MaintenanceType = maintenanceForm.MaintenanceType,
                    ScheduledDate = maintenanceForm.ScheduledDate,
                    Priority = maintenanceForm.Priority,
                    Status = maintenanceForm.Status,
                    EstimatedCost = maintenanceForm.EstimatedCost,
                    StartDate = maintenanceForm.StartDate ?? DateTime.UtcNow,
                    EndDate = maintenanceForm.EndDate,
                    Vendor = maintenanceForm.Vendor,
                    Description = maintenanceForm.Description ?? string.Empty,
                    Notes = maintenanceForm.Notes
                };

                var result = await MaintenanceApiService.CreateAsync(createCommand);

                if (result != null && result.IsCompleted)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Maintenance créée avec succès");
                    CloseModal();
                    await LoadMaintenances(currentPage);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la création de la maintenance");
                }
            }
            else
            {
                // Modification
                var updateCommand = new UpdateMaintenanceCommand
                {
                    Id = editingMaintenance.Id,
                    VehicleId = maintenanceForm.VehicleId,
                    MaintenanceType = maintenanceForm.MaintenanceType,
                    ScheduledDate = maintenanceForm.ScheduledDate,
                    Priority = maintenanceForm.Priority,
                    Status = maintenanceForm.Status,
                    EstimatedCost = maintenanceForm.EstimatedCost,
                    StartDate = maintenanceForm.StartDate ?? DateTime.UtcNow ,
                    EndDate = maintenanceForm.EndDate,
                    Vendor = maintenanceForm.Vendor,
                    Description = maintenanceForm.Description ?? string.Empty,
                    Notes = maintenanceForm.Notes
                };

                var result = await MaintenanceApiService.UpdateAsync(editingMaintenance.Id, updateCommand);

                if (result != null && result.IsCompleted)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Maintenance modifiée avec succès");
                    CloseModal();
                    await LoadMaintenances(currentPage);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la modification de la maintenance");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private async Task CompleteMaintenance(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Marquer cette maintenance comme terminée ?"))
        {
            try
            {
                var result = await MaintenanceApiService.CompleteMaintenanceAsync(id,DateTime.UtcNow,0);
                if (result)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Maintenance marquée comme terminée");
                    await LoadMaintenances(currentPage);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la finalisation de la maintenance");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
            }
        }
    }
    
    private async Task DeleteMaintenance(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer cette maintenance ?"))
        {
            try
            {
                var result = await MaintenanceApiService.DeleteAsync(id);
                if (result)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Maintenance supprimée avec succès");
                    await LoadMaintenances(currentPage);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la suppression de la maintenance");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
            }
        }
    }
    
    private static string GetStatusBadgeClass(string status) => status?.ToLower() switch
    {
        "scheduled" => "secondary",
        "inprogress" => "primary",
        "completed" => "success",
        "cancelled" => "danger",
        _ => "secondary"
    };
    
    private static string GetPriorityBadgeClass(string priority) => priority?.ToLower() switch
    {
        "low" => "success",
        "medium" => "warning",
        "high" => "danger",
        "critical" => "dark",
        _ => "secondary"
    };
}
