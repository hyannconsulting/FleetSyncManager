@page "/vehicles"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using MediatR
@using Laroche.FleetManager.Application.Queries.Vehicles
@using Laroche.FleetManager.Application.Commands.Vehicles
@inject IMediator Mediator
@inject IJSRuntime JS

<PageTitle>Gestion des Véhicules - FleetSyncManager</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="h3 text-primary">
                    <i class="fas fa-car"></i> Gestion des Véhicules
                </h1>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="fas fa-plus"></i> Ajouter un véhicule
                </button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="row mb-3">
            <div class="col-12">
                <div class="alert @(alertType == "success" ? "alert-success" : "alert-danger") alert-dismissible fade show">
                    <i class="fas @(alertType == "success" ? "fa-check-circle" : "fa-exclamation-circle")"></i>
                    @alertMessage
                    <button type="button" class="btn-close" @onclick="ClearAlert"></button>
                </div>
            </div>
        </div>
    }

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" placeholder="Rechercher par immatriculation, marque, modèle..."
                       @bind="searchTerm" @onkeypress="OnSearchKeyPress" />
                <button class="btn btn-outline-secondary" @onclick="LoadVehicles">Rechercher</button>
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="statusFilter" @bind:after="LoadVehicles">
                <option value="">Tous les statuts</option>
                <option value="Active">Actif</option>
                <option value="InMaintenance">En maintenance</option>
                <option value="Inactive">Inactif</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="pageSize" @bind:after="LoadVehicles">
                <option value="10">10 par page</option>
                <option value="25">25 par page</option>
                <option value="50">50 par page</option>
            </select>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            @if (isLoading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    <p class="mt-2">Chargement des véhicules...</p>
                </div>
            }
            else if (vehicles?.Any() == true)
            {
                <div class="card border-0 shadow-sm">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th><i class="fas fa-id-card me-2"></i>Immatriculation</th>
                                    <th><i class="fas fa-car me-2"></i>Véhicule</th>
                                    <th><i class="fas fa-calendar me-2"></i>Année</th>
                                    <th><i class="fas fa-tachometer-alt me-2"></i>Kilométrage</th>
                                    <th><i class="fas fa-user me-2"></i>Conducteur</th>
                                    <th><i class="fas fa-info-circle me-2"></i>Statut</th>
                                    <th class="text-center"><i class="fas fa-cogs me-2"></i>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var vehicle in vehicles)
                                {
                                    <tr>
                                        <td>
                                            <strong class="text-primary">@vehicle.LicensePlate</strong>
                                        </td>
                                        <td>
                                            <div>
                                                <strong>@vehicle.Brand @vehicle.Model</strong>
                                                @if (!string.IsNullOrEmpty(vehicle.Vin))
                                                {
                                                    <br><small class="text-muted">VIN: @vehicle.Vin</small>
                                                }
                                            </div>
                                        </td>
                                        <td>@vehicle.Year</td>
                                        <td>
                                            <span class="badge bg-info">@vehicle.CurrentMileage.ToString("N0") km</span>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(vehicle.AssignedDriverName))
                                            {
                                                <span class="badge bg-success">@vehicle.AssignedDriverName</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Non assigné</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(vehicle.Status.ToString())">
                                                @GetStatusText(vehicle.Status.ToString())
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-info" 
                                                        @onclick="() => ViewVehicle(vehicle)" 
                                                        title="Voir les détails">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-warning" 
                                                        @onclick="() => EditVehicle(vehicle)" 
                                                        title="Modifier">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => ConfirmDelete(vehicle)" 
                                                        title="Supprimer">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Pagination -->
                @if (pagedResult != null && pagedResult.TotalPages > 1)
                {
                    <nav class="mt-4">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(currentPage - 1)">Précédent</button>
                            </li>
                            
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                            {
                                int pageNum = i;
                                <li class="page-item @(currentPage == i ? "active" : "")">
                                    <button class="page-link" @onclick="() => LoadPage(pageNum)">@i</button>
                                </li>
                            }
                            
                            <li class="page-item @(currentPage >= pagedResult.TotalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(currentPage + 1)">Suivant</button>
                            </li>
                        </ul>
                    </nav>
                    
                    <div class="text-center text-muted">
                        Affichage de @((currentPage - 1) * pageSize + 1) à @Math.Min(currentPage * pageSize, pagedResult.TotalItems) 
                        sur @pagedResult.TotalItems véhicules
                    </div>
                }
            }
            else
            {
                <div class="text-center p-5">
                    <i class="fas fa-car fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">Aucun véhicule trouvé</h4>
                    <p class="text-muted">Commencez par ajouter votre premier véhicule à la flotte.</p>
                    <button class="btn btn-primary" @onclick="OpenCreateModal">
                        <i class="fas fa-plus"></i> Ajouter un véhicule
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal de création/modification -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas @(editingVehicle == null ? "fa-plus" : "fa-edit")"></i>
                        @(editingVehicle == null ? "Ajouter un véhicule" : "Modifier le véhicule")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="vehicleForm" OnValidSubmit="SaveVehicle">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Immatriculation <span class="text-danger">*</span></label>
                                <InputText class="form-control" @bind-Value="vehicleForm.LicensePlate" />
                                <ValidationMessage For="() => vehicleForm.LicensePlate" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Numéro VIN</label>
                                <InputText class="form-control" @bind-Value="vehicleForm.Vin" />
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Marque <span class="text-danger">*</span></label>
                                <InputText class="form-control" @bind-Value="vehicleForm.Brand" />
                                <ValidationMessage For="() => vehicleForm.Brand" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Modèle <span class="text-danger">*</span></label>
                                <InputText class="form-control" @bind-Value="vehicleForm.Model" />
                                <ValidationMessage For="() => vehicleForm.Model" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Année <span class="text-danger">*</span></label>
                                <InputNumber class="form-control" @bind-Value="vehicleForm.Year" />
                                <ValidationMessage For="() => vehicleForm.Year" />
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Type de carburant <span class="text-danger">*</span></label>
                                <InputText class="form-control" @bind-Value="vehicleForm.FuelType" />
                                <ValidationMessage For="() => vehicleForm.FuelType" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Kilométrage actuel</label>
                                <InputNumber class="form-control" @bind-Value="vehicleForm.CurrentMileage" />
                            </div>
                        </div>
                        
                        @if (editingVehicle != null)
                        {
                            <div class="mb-3">
                                <label class="form-label">Statut</label>
                                <InputText class="form-control" @bind-Value="vehicleForm.Status" />
                            </div>
                        }
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Date d'achat</label>
                                <InputDate class="form-control" @bind-Value="vehicleForm.PurchaseDate" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Prix d'achat</label>
                                <InputNumber class="form-control" @bind-Value="vehicleForm.PurchasePrice" />
                            </div>
                        </div>
                        
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Annuler</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="fas fa-save"></i>
                                @(editingVehicle == null ? "Ajouter" : "Modifier")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PagedResult<VehicleDto>? pagedResult;
    private List<VehicleDto> vehicles = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showModal = false;
    
    private int currentPage = 1;
    private int pageSize = 25;
    private string searchTerm = "";
    private string statusFilter = "";
    
    private string alertMessage = "";
    private string alertType = "";
    
    private VehicleDto? editingVehicle;
    private VehicleForm vehicleForm = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadVehicles();
    }
    
    private async Task LoadVehicles()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var query = new GetAllVehiclesQuery
            {
                Page = currentPage,
                PageSize = pageSize,
                SearchTerm = string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm,
                Status = string.IsNullOrWhiteSpace(statusFilter) ? null : statusFilter
            };
            
            var result = await Mediator.Send(query);
            
            if (result.IsSuccess)
            {
                pagedResult = result.Value;
                vehicles = pagedResult?.Items?.ToList() ?? new List<VehicleDto>();
            }
            else
            {
                ShowAlert("Erreur lors du chargement des véhicules: " + result.Error, "danger");
                vehicles = new List<VehicleDto>();
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Erreur lors du chargement des véhicules: " + ex.Message, "danger");
            vehicles = new List<VehicleDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadPage(int page)
    {
        currentPage = page;
        await LoadVehicles();
    }
    
    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadVehicles();
        }
    }
    
    private void OpenCreateModal()
    {
        editingVehicle = null;
        vehicleForm = new VehicleForm();
        showModal = true;
    }
    
    private void EditVehicle(VehicleDto vehicle)
    {
        editingVehicle = vehicle;
        vehicleForm = new VehicleForm
        {
            LicensePlate = vehicle.LicensePlate,
            Vin = vehicle.Vin,
            Brand = vehicle.Brand,
            Model = vehicle.Model,
            Year = vehicle.Year,
            FuelType = vehicle.FuelType.ToString(),
            CurrentMileage = vehicle.CurrentMileage,
            Status = vehicle.Status.ToString(),
            PurchaseDate = vehicle.PurchaseDate,
            PurchasePrice = vehicle.PurchasePrice
        };
        showModal = true;
    }
    
    private void ViewVehicle(VehicleDto vehicle)
    {
        // Naviguer vers la page de détails du véhicule
        // Navigation.NavigateTo($"/vehicles/{vehicle.Id}");
    }
    
    private async Task ConfirmDelete(VehicleDto vehicle)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"Êtes-vous sûr de vouloir supprimer le véhicule {vehicle.LicensePlate} ?");
        
        if (confirmed)
        {
            await DeleteVehicle(vehicle.Id);
        }
    }
    
    private async Task DeleteVehicle(int id)
    {
        try
        {
            var command = new DeleteVehicleCommand(id);
            var result = await Mediator.Send(command);
            
            if (result.IsSuccess)
            {
                ShowAlert("Véhicule supprimé avec succès", "success");
                await LoadVehicles();
            }
            else
            {
                ShowAlert("Erreur lors de la suppression: " + result.Error, "danger");
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Erreur lors de la suppression: " + ex.Message, "danger");
        }
    }
    
    private async Task SaveVehicle()
    {
        isSaving = true;
        StateHasChanged();
        
        try
        {
            if (editingVehicle == null)
            {
                var createCommand = new CreateVehicleCommand
                {
                    LicensePlate = vehicleForm.LicensePlate,
                    Vin = vehicleForm.Vin,
                    Brand = vehicleForm.Brand,
                    Model = vehicleForm.Model,
                    Year = vehicleForm.Year,
                    FuelType = vehicleForm.FuelType,
                    CurrentMileage = vehicleForm.CurrentMileage,
                    PurchaseDate = vehicleForm.PurchaseDate,
                    PurchasePrice = vehicleForm.PurchasePrice
                };
                
                var result = await Mediator.Send(createCommand);
                
                if (result.IsSuccess)
                {
                    ShowAlert("Véhicule ajouté avec succès", "success");
                    CloseModal();
                    await LoadVehicles();
                }
                else
                {
                    ShowAlert("Erreur lors de l'ajout: " + result.Error, "danger");
                }
            }
            else
            {
                var updateCommand = new UpdateVehicleCommand
                {
                    Id = editingVehicle.Id,
                    LicensePlate = vehicleForm.LicensePlate,
                    Vin = vehicleForm.Vin,
                    Brand = vehicleForm.Brand,
                    Model = vehicleForm.Model,
                    Year = vehicleForm.Year,
                    FuelType = vehicleForm.FuelType,
                    CurrentMileage = vehicleForm.CurrentMileage,
                    Status = vehicleForm.Status
                };
                
                var result = await Mediator.Send(updateCommand);
                
                if (result.IsSuccess)
                {
                    ShowAlert("Véhicule modifié avec succès", "success");
                    CloseModal();
                    await LoadVehicles();
                }
                else
                {
                    ShowAlert("Erreur lors de la modification: " + result.Error, "danger");
                }
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Erreur lors de l'enregistrement: " + ex.Message, "danger");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private void CloseModal()
    {
        showModal = false;
        editingVehicle = null;
        vehicleForm = new VehicleForm();
    }
    
    private void ShowAlert(string message, string type)
    {
        alertMessage = message;
        alertType = type;
        StateHasChanged();
    }
    
    private void ClearAlert()
    {
        alertMessage = "";
        alertType = "";
    }
    
    private string GetStatusBadgeClass(string status) => status switch
    {
        "Active" => "bg-success",
        "InMaintenance" => "bg-warning",
        "Inactive" => "bg-secondary",
        _ => "bg-primary"
    };
    
    private string GetStatusText(string status) => status switch
    {
        "Active" => "Actif",
        "InMaintenance" => "En maintenance",
        "Inactive" => "Inactif",
        _ => status
    };
    
    public class VehicleForm
    {
        [Required(ErrorMessage = "L'immatriculation est obligatoire")]
        public string LicensePlate { get; set; } = "";
        
        public string? Vin { get; set; }
        
        [Required(ErrorMessage = "La marque est obligatoire")]
        public string Brand { get; set; } = "";
        
        [Required(ErrorMessage = "Le modèle est obligatoire")]
        public string Model { get; set; } = "";
        
        [Range(1900, 2030, ErrorMessage = "L'année doit être comprise entre 1900 et 2030")]
        public int Year { get; set; } = DateTime.Now.Year;
        
        [Required(ErrorMessage = "Le type de carburant est obligatoire")]
        public string FuelType { get; set; } = "";
        
        [Range(0, int.MaxValue, ErrorMessage = "Le kilométrage ne peut pas être négatif")]
        public int CurrentMileage { get; set; }
        
        public string Status { get; set; } = "Active";
        
        public DateTime? PurchaseDate { get; set; }
        
        [Range(0, double.MaxValue, ErrorMessage = "Le prix d'achat ne peut pas être négatif")]
        public decimal? PurchasePrice { get; set; }
    }
}
